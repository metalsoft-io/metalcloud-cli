package ostemplate

import (
	"testing"

	gomock "github.com/golang/mock/gomock"
	metalcloud "github.com/metalsoft-io/metal-cloud-sdk-go/v3"
	mock_metalcloud "github.com/metalsoft-io/metalcloud-cli/helpers"
	"github.com/metalsoft-io/metalcloud-cli/internal/command"
	. "github.com/onsi/gomega"
)

func TestOSTemplatesListCmd(t *testing.T) {
	RegisterTestingT(t)
	ctrl := gomock.NewController(t)

	list := map[string]metalcloud.OSTemplate{
		"test": {
			VolumeTemplateID:        10,
			VolumeTemplateLabel:     "test",
			OSAssetBootloaderOSBoot: 100,
		},
	}

	client := mock_metalcloud.NewMockMetalCloudClient(ctrl)

	client.EXPECT().
		OSTemplates().
		Return(&list, nil).
		AnyTimes()

	asset := metalcloud.OSAsset{
		OSAssetID:       100,
		OSAssetFileName: "test",
	}

	client.EXPECT().
		OSAssetGet(list["test"].OSAssetBootloaderOSBoot).
		Return(&asset, nil).
		AnyTimes()

	//test json

	expectedFirstRow := map[string]interface{}{
		"ID":    10,
		"LABEL": "test",
	}

	command.TestListCommand(templatesListCmd, nil, client, expectedFirstRow, t)

}

func TestOSTemplateCreateCmd(t *testing.T) {
	RegisterTestingT(t)
	ctrl := gomock.NewController(t)

	tmpl := metalcloud.OSTemplate{
		VolumeTemplateID:                   10,
		VolumeTemplateLabel:                "test",
		OSAssetBootloaderOSBoot:            100,
		VolumeTemplateSizeMBytes:           40960,
		VolumeTemplateDisplayName:          "Centos7",
		VolumeTemplateDescription:          "centos7-10",
		VolumeTemplateLocalDiskSupported:   true,
		VolumeTemplateBootMethodsSupported: "pxe_iscsi",
		VolumeTemplateDeprecationStatus:    "not_deprecated",
		VolumeTemplateRepoURL:              "centos7_repo_url",
		VolumeTemplateVersion:              "0.0.0",
		VolumeTemplateOperatingSystem: &metalcloud.OperatingSystem{
			OperatingSystemType:         "Centos",
			OperatingSystemVersion:      "7",
			OperatingSystemArchitecture: "x86_64",
		},
		OSTemplateCredentials: &metalcloud.OSTemplateCredentials{
			OSTemplateInitialUser:     "user0",
			OSTemplateInitialPassword: "pass0",
			OSTemplateInitialSSHPort:  22,
		},
	}

	client := mock_metalcloud.NewMockMetalCloudClient(ctrl)

	client.EXPECT().
		OSTemplateCreate(gomock.Any()).
		Return(&tmpl, nil).
		AnyTimes()

	asset := metalcloud.OSAsset{
		OSAssetID:       100,
		OSAssetFileName: "test",
	}

	client.EXPECT().
		OSAssetGet(tmpl.OSAssetBootloaderOSBoot).
		Return(&asset, nil).
		AnyTimes()

	//test json

	cases := []command.CommandTestCase{
		{
			Name: "create-good1",
			Cmd: command.MakeCommand(map[string]interface{}{
				"label":            tmpl.VolumeTemplateLabel,
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"boot_type":        tmpl.VolumeTemplateBootType,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
				"version":          tmpl.VolumeTemplateVersion,
			}),
			Good: true,
		},
		{
			Name: "with use-autogenerated-initial-password ",
			Cmd: command.MakeCommand(map[string]interface{}{
				"label":                              tmpl.VolumeTemplateLabel,
				"display_name":                       tmpl.VolumeTemplateDisplayName,
				"boot_type":                          tmpl.VolumeTemplateBootType,
				"os_type":                            tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":                         tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":                    tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":                       tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"use_autogenerated_initial_password": true,
				"initial_ssh_port":                   tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: true,
		},
		{
			Name: "missing os flags",
			Cmd: command.MakeCommand(map[string]interface{}{
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing os type",
			Cmd: command.MakeCommand(map[string]interface{}{
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing os version",
			Cmd: command.MakeCommand(map[string]interface{}{
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing os architecture",
			Cmd: command.MakeCommand(map[string]interface{}{
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing label",
			Cmd: command.MakeCommand(map[string]interface{}{
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing initial_password",
			Cmd: command.MakeCommand(map[string]interface{}{
				"label":            tmpl.VolumeTemplateLabel,
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"boot_type":        tmpl.VolumeTemplateBootType,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing initial_user",
			Cmd: command.MakeCommand(map[string]interface{}{
				"label":            tmpl.VolumeTemplateLabel,
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"boot_type":        tmpl.VolumeTemplateBootType,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
			}),
			Good: false,
		},
		{
			Name: "missing either",
			Cmd: command.MakeCommand(map[string]interface{}{
				"label":            tmpl.VolumeTemplateLabel,
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"boot_type":        tmpl.VolumeTemplateBootType,
				"os_type":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":       tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":  tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "both password options",
			Cmd: command.MakeCommand(map[string]interface{}{
				"label":                              tmpl.VolumeTemplateLabel,
				"display_name":                       tmpl.VolumeTemplateDisplayName,
				"boot_type":                          tmpl.VolumeTemplateBootType,
				"os_type":                            tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":                         tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":                    tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":                       tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":                   tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":                   tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
				"use_autogenerated_initial_password": true,
			}),
			Good: false,
		},
	}

	command.TestCreateCommand(templateCreateCmd, cases, client, t)
}

func TestOStemplateUpdateCmd(t *testing.T) {
	RegisterTestingT(t)
	ctrl := gomock.NewController(t)

	tmpl := metalcloud.OSTemplate{
		VolumeTemplateID:                   10,
		VolumeTemplateLabel:                "test",
		OSAssetBootloaderOSBoot:            100,
		VolumeTemplateSizeMBytes:           40960,
		VolumeTemplateDisplayName:          "Centos7",
		VolumeTemplateDescription:          "centos7-10",
		VolumeTemplateLocalDiskSupported:   true,
		VolumeTemplateBootMethodsSupported: "pxe_iscsi",
		VolumeTemplateDeprecationStatus:    "not_deprecated",
		VolumeTemplateRepoURL:              "centos7_repo_url",
		VolumeTemplateVersion:              "0.0.0",
		VolumeTemplateOperatingSystem: &metalcloud.OperatingSystem{
			OperatingSystemType:         "Centos",
			OperatingSystemVersion:      "7",
			OperatingSystemArchitecture: "x86_64",
		},
		OSTemplateCredentials: &metalcloud.OSTemplateCredentials{
			OSTemplateInitialUser:     "user0",
			OSTemplateInitialPassword: "pass0",
			OSTemplateInitialSSHPort:  22,
		},
	}

	client := mock_metalcloud.NewMockMetalCloudClient(ctrl)

	client.EXPECT().
		OSTemplateUpdate(gomock.Any(), gomock.Any()).
		Return(&tmpl, nil).
		AnyTimes()

	client.EXPECT().
		OSTemplateGet(gomock.Any(), gomock.Any()).
		Return(&tmpl, nil).
		AnyTimes()

	asset := metalcloud.OSAsset{
		OSAssetID:       100,
		OSAssetFileName: "test",
	}

	client.EXPECT().
		OSAssetGet(tmpl.OSAssetBootloaderOSBoot).
		Return(&asset, nil).
		AnyTimes()

	//test json

	cases := []command.CommandTestCase{
		{
			Name: "edit-good1",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": tmpl.VolumeTemplateID,
				"label":               tmpl.VolumeTemplateLabel,
				"display_name":        tmpl.VolumeTemplateDisplayName,
				"boot_type":           tmpl.VolumeTemplateBootType,
				"os_type":             tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":     tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":        tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":    tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":    tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: true,
		},
		{
			Name: "edit-good2",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": tmpl.VolumeTemplateID,
				"label":               tmpl.VolumeTemplateLabel,
				"display_name":        tmpl.VolumeTemplateDisplayName,
				"boot_type":           tmpl.VolumeTemplateBootType,
				"os_type":             tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":     tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":        tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":    tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":    tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: true,
		},
		{
			Name: "missing os type",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": tmpl.VolumeTemplateID,
				"display_name":        tmpl.VolumeTemplateDisplayName,
				"os_version":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"os_architecture":     tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":        tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":    tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":    tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing os version",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": tmpl.VolumeTemplateID,
				"display_name":        tmpl.VolumeTemplateDisplayName,
				"os_type":             tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_architecture":     tmpl.VolumeTemplateOperatingSystem.OperatingSystemArchitecture,
				"initial_user":        tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":    tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":    tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "missing os architecture",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": tmpl.VolumeTemplateID,
				"display_name":        tmpl.VolumeTemplateDisplayName,
				"os_type":             tmpl.VolumeTemplateOperatingSystem.OperatingSystemType,
				"os_version":          tmpl.VolumeTemplateOperatingSystem.OperatingSystemVersion,
				"initial_user":        tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":    tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":    tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "with use-autogenerated-initial-password ",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name":                tmpl.VolumeTemplateID,
				"label":                              tmpl.VolumeTemplateLabel,
				"display_name":                       tmpl.VolumeTemplateDisplayName,
				"boot_type":                          tmpl.VolumeTemplateBootType,
				"initial_user":                       tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"use_autogenerated_initial_password": true,
				"initial_ssh_port":                   tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: true,
		},
		{
			Name: "missing id",
			Cmd: command.MakeCommand(map[string]interface{}{
				"display_name":     tmpl.VolumeTemplateDisplayName,
				"initial_user":     tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password": tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port": tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
			}),
			Good: false,
		},
		{
			Name: "both password options",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name":                tmpl.VolumeTemplateID,
				"label":                              tmpl.VolumeTemplateLabel,
				"display_name":                       tmpl.VolumeTemplateDisplayName,
				"boot_type":                          tmpl.VolumeTemplateBootType,
				"initial_user":                       tmpl.OSTemplateCredentials.OSTemplateInitialUser,
				"initial_password":                   tmpl.OSTemplateCredentials.OSTemplateInitialPassword,
				"initial_ssh_port":                   tmpl.OSTemplateCredentials.OSTemplateInitialSSHPort,
				"use_autogenerated_initial_password": true,
			}),
			Good: false,
		},
	}

	command.TestCreateCommand(templateUpdateCmd, cases, client, t)
}

func TestOSTemplateMakePrivateCmd(t *testing.T) {

	client := mock_metalcloud.NewMockMetalCloudClient(gomock.NewController(t))

	tmpl := metalcloud.OSTemplate{
		VolumeTemplateID:    10,
		VolumeTemplateLabel: "test",
	}

	tmpls := map[string]metalcloud.OSTemplate{
		"t1": tmpl,
	}

	user := metalcloud.User{
		UserID: 1,
	}

	user1 := metalcloud.User{
		UserEmail: "test",
	}

	client.EXPECT().
		OSTemplateGet(gomock.Any(), false).
		Return(&tmpl, nil).
		AnyTimes()

	client.EXPECT().
		OSTemplates().
		Return(&tmpls, nil).
		MinTimes(1)

	client.EXPECT().
		UserGet(gomock.Any()).
		Return(&user, nil).
		AnyTimes()

	client.EXPECT().
		UserGetByEmail(gomock.Any()).
		Return(&user1, nil).
		MinTimes(1)

	client.EXPECT().
		OSTemplateMakePrivate(gomock.Any(), gomock.Any()).
		Return(nil).
		AnyTimes()

	cases := []command.CommandTestCase{
		{
			Name: "good1",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": 10,
				"user_id":             1,
			}),
			Good: true,
			Id:   0,
		},
		{
			Name: "good2",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": "test",
				"user_id":             1,
			}),
			Good: true,
			Id:   0,
		},
		{
			Name: "good3",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": 10,
				"user_id":             "test",
			}),
			Good: true,
			Id:   0,
		},
		{
			Name: "template not found",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": "test1",
				"user_id":             1,
			}),
			Good: false,
			Id:   0,
		},
		{
			Name: "missing template id or name",
			Cmd: command.MakeCommand(map[string]interface{}{
				"user_id": 1,
			}),
			Good: false,
			Id:   0,
		},
		{
			Name: "missing user id or email",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": "test",
			}),
			Good: false,
			Id:   0,
		},
	}

	command.TestCreateCommand(templateMakePrivateCmd, cases, client, t)
}

func TestOSTemplateMakePublicCmd(t *testing.T) {

	client := mock_metalcloud.NewMockMetalCloudClient(gomock.NewController(t))

	tmpl := metalcloud.OSTemplate{
		VolumeTemplateID:    10,
		VolumeTemplateLabel: "test",
	}

	tmpls := map[string]metalcloud.OSTemplate{
		"t1": tmpl,
	}

	client.EXPECT().
		OSTemplateGet(gomock.Any(), false).
		Return(&tmpl, nil).
		AnyTimes()

	client.EXPECT().
		OSTemplates().
		Return(&tmpls, nil).
		MinTimes(1)

	client.EXPECT().
		OSTemplateMakePublic(gomock.Any()).
		Return(nil).
		AnyTimes()

	cases := []command.CommandTestCase{
		{
			Name: "good1",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": 10,
			}),
			Good: true,
			Id:   0,
		},
		{
			Name: "good2",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": "test",
			}),
			Good: true,
			Id:   0,
		},
		{
			Name: "template not found",
			Cmd: command.MakeCommand(map[string]interface{}{
				"template_id_or_name": "test1",
			}),
			Good: false,
			Id:   0,
		},
		{
			Name: "missing template id or name",
			Cmd:  command.MakeCommand(map[string]interface{}{}),
			Good: false,
			Id:   0,
		},
	}

	command.TestCreateCommand(templateMakePublicCmd, cases, client, t)
}

func TestOSTemplateListRepositoryCmd(t *testing.T) {
	RegisterTestingT(t)
	client := mock_metalcloud.NewMockMetalCloudClient(gomock.NewController(t))

	cases := []command.CommandTestCase{
		{
			Name: "list repository",
			Cmd:  command.MakeCommand(map[string]interface{}{}),
			Good: true,
		},
	}

	command.TestCreateCommand(templateListRepoCmd, cases, client, t)
}

func TestOSTemplateValidateRepositoryCmd(t *testing.T) {
	RegisterTestingT(t)
	client := mock_metalcloud.NewMockMetalCloudClient(gomock.NewController(t))

	cases := []command.CommandTestCase{
		{
			Name: "validate repository",
			Cmd:  command.MakeCommand(map[string]interface{}{}),
			Good: true,
		},
	}

	command.TestCreateCommand(templateValidateRepoCmd, cases, client, t)
}
