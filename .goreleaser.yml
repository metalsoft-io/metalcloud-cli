# This is an example goreleaser.yaml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
before:
  hooks:
    # you may remove this if you don't use vgo
    - go mod tidy
    # you may remove this if you don't need go generate
    #- go generate ./...
builds:
-
  id: metalcloud-cli
  env:
    - CGO_ENABLED=0
    # GOOS list to build for.
      # For more info refer to: https://golang.org/doc/install/source#environment
      # Defaults are darwin and linux.
  ldflags:
    - -s -w
    - -X main.version={{.Version}}
    - -X main.commit={{.Commit}}
    - -X main.date={{.Date}}
    #- -X "github.com/metalsoft-io/metalcloud-cli/internal/configuration.Version={{ .Tag }}"
    #- -X "github.com/metalsoft-io/metalcloud-cli/internal/configuration.Commit={{ .ShortCommit }}"
    #- -X "github.com/metalsoft-io/metalcloud-cli/internal/configuration.Date={{ .Date }}"
  goos:
    - linux
    - darwin
    - windows
  main: ./cmd/metalcloud-cli
  
archives:
- id: archive
  name_template: >-
    {{ .ProjectName }}_
    {{- .Version }}_
    {{- title .Os }}_
    {{- if eq .Arch "amd64" }}x86_64
    {{- else if eq .Arch "386" }}i386
    {{- else }}{{ .Arch }}{{ end }}
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  filters:
    exclude:
    - '^docs:'
    - '^test:'
brews:
  -
    # Name template of the recipe
    # Default to project name
    name: metalcloud-cli

    # IDs of the archives to use.
    # Defaults to all.
    #ids:

    # GOARM to specify which 32-bit arm version to use if there are multiple versions
    # from the build section. Brew formulas support atm only one 32-bit version.
    # Default is 6 for all artifacts or each id if there a multiple versions.
    goarm: 6


    # NOTE: make sure the url_template, the token and given repo (github or gitlab) owner and name are from the
    # same kind. We will probably unify this in the next major version like it is done with scoop.

    # Github repository to push the tap to.
    repository:
      owner: metalsoft-io
      name: homebrew-repo
      token: "{{ .Env.GH_TOKEN_ALEX_HOMEBREW_METALSOFT }}"
    
    commit_author:
      name: goreleaserbot
      email: goreleaser@carlosbecker.com
    
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"


    # Folder inside the repository to put the formula.
    # Default is the root folder.
    #folder: Formula

    # Caveats for the user of your binary.
    # Default is empty.
    caveats: "metalcloud-cli help"

    # Your app's homepage.
    # Default is empty.
    homepage: "https://metalsoft.io/"

    # Your app's description.
    # Default is empty.
    description: "Metalcloud's CLI"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Default is false.
    skip_upload: auto

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    # Default is empty.
    #custom_block: |
     # head "https://github.com/some/package.git"
     # ...

    # Packages your package depends on.
    #dependencies:
    #  - git
    #  - zsh

    # Packages that conflict with your package.
   # conflicts:
   #   - svn
   #   - bash

    # Specify for packages that run as a service.
    # Default is empty.
    #plist: |
    #  <?xml version="1.0" encoding="UTF-8"?>
    #  ...

    # So you can `brew test` your formula.
    # Default is empty.
    #test: |
    #  system "#{bin}/program --version"
    #  ...

    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    install: |
      bin.install "metalcloud-cli"

# .goreleaser.yml
nfpms:
  # note that this is an array of nfpm configs
  -
    # ID of the nfpm config, must be unique.
    # Defaults to "default".
    id: metalcloud-cli-linux

    # Name of the package.
    # Defaults to `ProjectName`.
    package_name: metalcloud-cli

    # You can change the file name of the package.
    # Default: `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}`
    file_name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"

    # Build IDs for the builds you want to create NFPM packages for.
    # Defaults to all builds.
    #builds:
    #- foo
    #- bar

    # Replacements for GOOS and GOARCH in the package name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.
   # replacements:
   #   amd64: 64-bit
   #  386: 32-bit
   #   darwin: macOS
   #   linux: 

    # Your app's vendor.
    # Default is empty.
    vendor: Metalsoft Cloud, Inc.
    # Your app's homepage.
    # Default is empty.
    homepage: https://metalsoft.io/

    # Your app's maintainer (probably you).
    # Default is empty.
    maintainer: support@metalsoft.io

    # Your app's description.
    # Default is empty.
    description: Metalcloud's CLI to build and maintain infrastructures.

    # Your app's license.
    # Default is empty.
    license: Apache 2.0

    # Formats to be generated.
    formats:
      - deb
      - rpm

    # Packages your package depends on.
    #dependencies:
    #  - git
    #  - zsh

    # Packages your package recommends installing.
    #recommends:
    #  - bzr
    #  - gtk

    # Packages your package suggests installing.
    #suggests:
    #  - cvs
    #  - ksh

    # Packages that conflict with your package.
    #conflicts:
     # - svn
     # - bash

    # Override default /usr/local/bin destination for binaries
    bindir: /usr/bin

    # Package epoch.
    # Defaults to empty.
    #epoch: 1

    # Empty folders that should be created and managed by the packager
    # implementation.
    # Default is empty.
    #empty_folders:
    #- /var/log/foobar

    # Files or directories to add to your package (beyond the binary).
    # Keys are source paths/globs to get the files from.
    # Values are the destination locations of the files in the package.
    #files:
    #  "scripts/etc/init.d/": "/etc/init.d"
    #  "path/**/glob": "/var/foo/glob"

    # Config files to add to your package. They are about the same as
    # the files keyword, except package managers treat them differently (while
    # uninstalling, mostly).
    # Keys are source paths/globs to get the files from.
    # Values are the destination locations of the files in the package.
    #config_files:
    #  "tmp/app_generated.conf": "/etc/app.conf"
    #  "conf/*.conf": "/etc/foo/"

    # Scripts to execute during the installation of the package.
    # Keys are the possible targets during the installation process
    # Values are the paths to the scripts which will be executed
    #scripts:
    #  preinstall: "scripts/preinstall.sh"
    #  postinstall: "scripts/postinstall.sh"
    #  preremove: "scripts/preremove.sh"
    #  postremove: "scripts/postremove.sh"

    # Some attributes can be overrided per package format.
    #overrides:
    #  deb:
    #    conflicts:
    #      - subversion
    #    dependencies:
    #      - git
    #    suggests:
    #      - gitk
    #    recommends:
    #      - tig
    #    empty_folders:
    #    - /var/log/bar
    #  rpm:
    #    replacements:
    #      amd64: x86_64
    #    name_template: "{{ .ProjectName }}-{{ .Version }}-{{ .Arch }}"
    #    files:
    #      "tmp/man.gz": "/usr/share/man/man8/app.8.gz"
    #    config_files:
    #      "tmp/app_generated.conf": "/etc/app-rpm.conf"
    #    scripts:
    #      preinstall: "scripts/preinstall-rpm.sh"
